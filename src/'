#pragma once

namespace hate {
	/**
	 * A component can be attatched to an entity.
	 * Components handle the the functionallity and data,
	 * their only requirement is that they extend the base
	 * component in someway, and have a unique key.
	 */
	class Component {
		public:
			// Creates a new component.
			Component();

			// Delets this component.
			~Component();

			// A static function to make it extendable.
			static std::string getKey() { return ""; }

			/**
			 * Returns the key for this component type.
			 * Each component type MUST have a unique key. You set this by
			 * overriding this function when you write the component.
			 * 
			 * You can make 2 or more components that share key, if you only want
			 * one of them to be able to be added to an entity at a time. 
			 *
			 * @return the key for this component type.
			 */
			virtual static std::string getKey();

		private:



	}
}
